import os
from config import bot
from checklist_service import ChecklistService
from telebot import types
from secret import admin_password
import json


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
def load_admin_ids():
    try:
        with open('admins.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('admin_ids', [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []  # ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def save_admin_ids(admin_ids):
    data = {'admin_ids': admin_ids}
    with open('admins.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
ADMIN_IDS = load_admin_ids()
ADMIN_PASSWORD = admin_password

checklist_service = ChecklistService()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 'add_title', 'add_description', 'add_image'
user_data = {}


def is_admin(user_id):
    return user_id in ADMIN_IDS


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="add_item"))
    markup.add(types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤", callback_data="list_items"))

    bot.send_message(message.chat.id, "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)


@bot.message_handler(commands=['addadmin'])
def add_admin_command(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin <–ø–∞—Ä–æ–ª—å>")
        return

    password = parts[1]
    if password == ADMIN_PASSWORD:
        user_id = message.from_user.id
        if not is_admin(user_id):
            ADMIN_IDS.append(user_id)
            save_admin_ids(ADMIN_IDS)
        bot.send_message(message.chat.id, "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")


@bot.callback_query_handler(func=lambda call: call.data == "add_item")
def start_adding_item(call):
    if not is_admin(call.from_user.id):
        return

    user_id = call.from_user.id
    user_states[user_id] = 'add_title'
    user_data[user_id] = {}

    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É–Ω–∫—Ç–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        return

    state = user_states.get(user_id)

    if state == 'add_title':
        user_data[user_id]['title'] = message.text
        user_states[user_id] = 'add_description'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞:")

    elif state == 'add_description':
        user_data[user_id]['description'] = message.text
        user_states[user_id] = 'add_image'

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=markup)

    elif state == 'add_image':
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data[user_id]['image_path'] = None
            finish_adding_item(message)
        elif message.text == "–û—Ç–º–µ–Ω–∞":
            cancel_adding(message)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'/'–û—Ç–º–µ–Ω–∞'")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        return

    state = user_states.get(user_id)

    if state == 'add_image':
        try:
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            filename = f"item_{message.from_user.id}_{message.message_id}.jpg"
            filepath = os.path.join(checklist_service.upload_folder, filename)

            with open(filepath, 'wb') as new_file:
                new_file.write(downloaded_file)

            user_data[user_id]['image_path'] = filepath
            finish_adding_item(message)

        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            reset_user_state(user_id)


def cancel_adding(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    reset_user_state(user_id)


def finish_adding_item(message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})

    try:
        item_id = checklist_service.add_item(
            data.get('title'),
            data.get('description'),
            data.get('image_path')
        )

        bot.send_message(message.chat.id, "‚úÖ –ü—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
        reset_user_state(user_id)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        reset_user_state(user_id)


def reset_user_state(user_id):
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_data:
        del user_data[user_id]


@bot.callback_query_handler(func=lambda call: call.data == "list_items")
def show_items_list(call):
    if not is_admin(call.from_user.id):
        return

    items = checklist_service.get_all_active_items()

    if not items:
        bot.send_message(call.message.chat.id, "üì≠ –ü—É–Ω–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    for item in items:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{item.id}"))
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item.id}"))

        if item.image_path and os.path.exists(item.image_path):
            with open(item.image_path, 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo,
                               caption=f"<b>{item.title}</b>\n\n{item.description}",
                               parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id,
                             f"<b>{item.title}</b>\n\n{item.description}",
                             parse_mode='HTML', reply_markup=markup)
