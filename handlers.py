from config import bot
from database import (
    update_user_activity,
    save_user_to_db,
    get_user_stats,
    get_user_language_from_db,
    check_user_exists,
    save_user_status,
    get_user_data,
    save_user_citizenship
)
from translations import get_user_language, translations, LANGUAGE_MAPPING, STATUS_MAPPING, COUNTRY_MAPPING
from keyboards import create_language_keyboard, create_main_menu_keyboard
from telebot import types
from checklist_service import ChecklistService
from database import is_item_completed, save_completed_item, remove_completed_item

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
checklist_service = ChecklistService()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_country_mapping():
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã"""
    mapping = {}
    for lang in ['russian', 'english', 'chinese']:
        for country_code in COUNTRY_MAPPING.keys():
            mapping[translations[lang][country_code]] = country_code
    return mapping


COUNTRY_TEXT_MAPPING = get_country_mapping()


def get_status_options():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–∞"""
    options = []
    for lang in ['russian', 'english', 'chinese']:
        options.extend([
            translations[lang]['status_option1'],
            translations[lang]['status_option2']
        ])
    return options


def get_menu_options():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–∞"""
    return [
        translations['russian']['menu'],
        translations['english']['menu'],
        translations['chinese']['menu']
    ]


# –•—ç–Ω–¥–ª–µ—Ä—ã
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    markup = create_language_keyboard()
    bot.send_message(
        message.chat.id,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ÈÄâÊã©ËØ≠Ë®Ä:",
        reply_markup=markup
    )


def show_citizenship_choice(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    countries = [
        translations[language]['kazakhstan'],
        translations[language]['tajikistan'],
        translations[language]['uzbekistan'],
        translations[language]['china'],
        translations[language]['belarus'],
        translations[language]['ukraine']
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç—Ä–∏ —Ä—è–¥–∞ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(countries), 2):
        row_buttons = [
            types.KeyboardButton(countries[i]),
            types.KeyboardButton(countries[i + 1] if i + 1 < len(countries) else None)
        ]
        markup.add(*filter(None, row_buttons))

    bot.send_message(
        chat_id,
        translations[language]['citizenship_choice'],
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text in LANGUAGE_MAPPING.keys())
def handle_language_selection(message):
    user_id = message.from_user.id
    language = LANGUAGE_MAPPING[message.text]

    save_user_to_db(user_id, language, message)
    show_welcome_message(message.chat.id, language)


def show_welcome_message(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    bot.send_message(chat_id, translations[language]['welcome'])
    show_status_choice(chat_id, language)


def show_status_choice(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    btn1 = types.KeyboardButton(translations[language]['status_option1'])
    btn2 = types.KeyboardButton(translations[language]['status_option2'])

    markup.add(btn1, btn2)

    bot.send_message(
        chat_id,
        translations[language]['status_choice'],
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text in get_status_options())
def handle_status_selection(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
    status_texts = [
        translations['russian']['status_option1'],
        translations['english']['status_option1'],
        translations['chinese']['status_option1']
    ]
    status = 'not_in_russia' if message.text in status_texts else 'in_russia'

    save_user_status(user_id, status)
    show_citizenship_choice(message.chat.id, lang)


@bot.message_handler(func=lambda message: message.text in COUNTRY_TEXT_MAPPING.keys())
def handle_citizenship_selection(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    country_code = COUNTRY_TEXT_MAPPING.get(message.text)

    if country_code:
        save_user_citizenship(user_id, country_code)
        show_final_message(message.chat.id, user_id, lang, country_code)


# handlers.py
def build_checklist_message(items, language, country, status, user_id, checklist_type):
    """–°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º —Ç–æ–ª—å–∫–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    templates = {
        'russian': {
            'header': f"""‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç:

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {country}
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}

üìù –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:""",
            'empty': "\n\nüìã –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∑–∂–µ.",
            'completed': "‚úÖ ",
            'not_completed': "‚ùå "
        },
        'english': {
            'header': f"""‚úÖ Your personalized checklist:

üìã Your details:
‚Ä¢ Citizenship: {country}
‚Ä¢ Current status: {status}

üìù Mark completed items:""",
            'empty': "\n\nüìã Checklist is empty. Administrator will add instructions later.",
            'completed': "‚úÖ ",
            'not_completed': "‚ùå "
        },
        'chinese': {
            'header': f"""‚úÖ ÊÇ®ÁöÑ‰∏™ÊÄßÂåñÊ∏ÖÂçïÔºö

üìã ÊÇ®ÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºö
‚Ä¢ ÂõΩÁ±ç: {country}
‚Ä¢ ÂΩìÂâçÁä∂ÊÄÅ: {status}

üìù Ê†áËÆ∞Â∑≤ÂÆåÊàêÁöÑÈ°πÁõÆÔºö""",
            'empty': "\n\nüìã Ê∏ÖÂçï‰∏∫Á©∫„ÄÇÁÆ°ÁêÜÂëòÁ®çÂêé‰ºöÊ∑ªÂä†ËØ¥Êòé„ÄÇ",
            'completed': "‚úÖ ",
            'not_completed': "‚ùå "
        }
    }

    template = templates[language]
    message_text = template['header']

    if items:
        for index, item in enumerate(items):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—É–Ω–∫—Ç
            is_completed = is_item_completed(user_id, checklist_type, item['id'])
            status_icon = template['completed'] if is_completed else template['not_completed']

            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            if language == 'russian':
                title = item['title']
            elif language == 'english':
                title = item['title_en'] or item['title']
            elif language == 'chinese':
                title = item['title_zh'] or item['title']

            message_text += f"\n{index + 1}. {status_icon}{title}"
    else:
        message_text += template['empty']

    return message_text


# handlers.py
def show_final_message(chat_id, user_id, language, country_code):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º"""
    user_data = get_user_data(user_id)
    if not user_data:
        return

    status = STATUS_MAPPING[user_data['status']][language]
    country = COUNTRY_MAPPING[country_code][language]

    # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç
    checklist_type = f"{user_data['status']}_{country_code}"
    items = checklist_service.get_items(checklist_type)

    # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    message_text = build_checklist_message(items, language, country, status, user_id, checklist_type)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –æ—Ç–º–µ—Ç–∫–∏
    for index, item in enumerate(items):
        is_completed = is_item_completed(user_id, checklist_type, item['id'])
        callback_action = "uncomplete" if is_completed else "complete"

        if language == 'russian':
            button_text = "–°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É" if is_completed else "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif language == 'english':
            button_text = "Unmark" if is_completed else "Complete"
        elif language == 'chinese':
            button_text = "ÂèñÊ∂àÊ†áËÆ∞" if is_completed else "Â∑≤ÂÆåÊàê"

        markup.add(types.InlineKeyboardButton(
            f"{button_text} #{index + 1}",
            callback_data=f"{callback_action}__{checklist_type}__{item['id']}"
        ))

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–π
    if items:
        if language == 'russian':
            button_text = "üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è"
        elif language == 'english':
            button_text = "üìã Show descriptions"
        elif language == 'chinese':
            button_text = "üìã ÊòæÁ§∫ÊèèËø∞"

        markup.add(types.InlineKeyboardButton(
            button_text,
            callback_data=f"descriptions__{checklist_type}__{language}"
        ))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.add(types.KeyboardButton(translations[language]['menu']))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(chat_id, message_text, reply_markup=reply_markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if items:
        if language == 'russian':
            control_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞–º–∏:"
        elif language == 'english':
            control_text = "Item management:"
        elif language == 'chinese':
            control_text = "È°πÁõÆÁÆ°ÁêÜ:"

        bot.send_message(chat_id, control_text, reply_markup=markup)


@bot.message_handler(commands=['help'])
def send_help(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)
    bot.send_message(message.chat.id, translations[lang]['help'])


# handlers.py
@bot.message_handler(func=lambda message: message.text in get_menu_options())
def handle_main_menu(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user_data = get_user_data(user_id)

    if user_data and user_data.get('status') and user_data.get('citizenship'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        show_final_message(message.chat.id, user_id, lang, user_data['citizenship'])
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        markup = create_main_menu_keyboard(lang)
        bot.send_message(
            message.chat.id,
            translations[lang].get('need_registration',
                                   '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.'),
            reply_markup=markup
        )


# handlers.py
@bot.callback_query_handler(func=lambda call: call.data.startswith(('complete__', 'uncomplete__')))
def handle_item_completion(call):
    user_id = call.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    parts = call.data.split('__')
    if len(parts) >= 3:
        action = parts[0]
        checklist_type = parts[1]
        item_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ
        item = checklist_service.get_item(checklist_type, item_id)
        if item:
            if action == 'complete':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
                save_completed_item(user_id, checklist_type, item_id, item['title'], item['description'])
                message = "‚úÖ –ü—É–Ω–∫—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!" if lang == 'russian' else "‚úÖ Item marked as completed!" if lang == 'english' else "‚úÖ È°πÁõÆÊ†áËÆ∞‰∏∫Â∑≤ÂÆåÊàê!"
            else:
                # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                remove_completed_item(user_id, checklist_type, item_id)
                message = "‚ùå –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–Ω—è—Ç–∞!" if lang == 'russian' else "‚ùå Completion mark removed!" if lang == 'english' else "‚ùå ÂÆåÊàêÊ†áËÆ∞Â∑≤ÁßªÈô§!"

            bot.answer_callback_query(call.id, message)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤
            user_data = get_user_data(user_id)
            if user_data:
                show_final_message(call.message.chat.id, user_id, lang, user_data['citizenship'])


@bot.callback_query_handler(func=lambda call: call.data.startswith('descriptions__'))
def handle_show_descriptions(call):
    user_id = call.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    parts = call.data.split('__')
    if len(parts) >= 3:
        checklist_type = parts[1]
        target_language = parts[2]  # –Ø–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π
    else:
        checklist_type = parts[1]
        target_language = lang  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    items = checklist_service.get_items(checklist_type)

    if not items:
        bot.answer_callback_query(call.id,
                                  "–ù–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞" if lang == 'russian' else "No items to show" if lang == 'english' else "Ê≤°ÊúâÂèØÊòæÁ§∫ÁöÑÈ°πÁõÆ")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    for index, item in enumerate(items):
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if target_language == 'russian':
            title = item['title']
            description = item['description']
        elif target_language == 'english':
            title = item['title_en'] or item['title']
            description = item['description_en'] or item['description']
        elif target_language == 'chinese':
            title = item['title_zh'] or item['title']
            description = item['description_zh'] or item['description']

        description_text = f"<b>#{index + 1}: {title}</b>\n\n"
        if description:
            description_text += f"{description}\n\n"
        else:
            if target_language == 'russian':
                description_text += "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
            elif target_language == 'english':
                description_text += "‚ÑπÔ∏è No description available\n\n"
            elif target_language == 'chinese':
                description_text += "‚ÑπÔ∏è Êó†ÊèèËø∞ÂèØÁî®\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        is_completed = is_item_completed(user_id, checklist_type, item['id'])
        if target_language == 'russian':
            status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif target_language == 'english':
            status_text = "‚úÖ Completed" if is_completed else "‚ùå Not completed"
        elif target_language == 'chinese':
            status_text = "‚úÖ Â∑≤ÂÆåÊàê" if is_completed else "‚ùå Êú™ÂÆåÊàê"

        description_text += f"<i>{status_text}</i>"

        bot.send_message(call.message.chat.id, description_text, parse_mode='HTML')

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    callback_handlers = {
        'info': lambda: bot.send_message(
            call.message.chat.id,
            translations[lang].get('info_text', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        ),
        'settings': lambda: send_welcome(call.message),
    }

    handler = callback_handlers.get(call.data)
    if handler:
        handler()