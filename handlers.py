from config import bot
from database import update_user_activity, save_user_to_db, get_user_stats, get_user_language_from_db, \
    check_user_exists, save_user_status
from translations import get_user_language, translations
from keyboards import create_language_keyboard, create_main_menu_keyboard
from telebot import types  # noqa
from database import get_user_data, save_user_citizenship

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    update_user_activity(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_exists = check_user_exists(user_id)

    if user_exists:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = get_user_language(user_id)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        show_welcome_message(message.chat.id, user_language)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        markup = create_language_keyboard()
        bot.send_message(message.chat.id,
                         "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ÈÄâÊã©ËØ≠Ë®Ä:",
                         reply_markup=markup)


def show_citizenship_choice(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    countries = [
        translations[language]['kazakhstan'],
        translations[language]['tajikistan'],
        translations[language]['uzbekistan'],
        translations[language]['china'],
        translations[language]['belarus'],
        translations[language]['ukraine']
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    row1 = [types.KeyboardButton(countries[0]), types.KeyboardButton(countries[1])]
    row2 = [types.KeyboardButton(countries[2]), types.KeyboardButton(countries[3])]
    row3 = [types.KeyboardButton(countries[4]), types.KeyboardButton(countries[5])]

    markup.add(*row1)
    markup.add(*row2)
    markup.add(*row3)

    bot.send_message(chat_id,
                     translations[language]['citizenship_choice'],
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá∏ English', 'üá®üá≥ ‰∏≠Êñá'])
def handle_language_selection(message):
    user_id = message.from_user.id

    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        language = 'russian'
    elif message.text == 'üá∫üá∏ English':
        language = 'english'
    elif message.text == 'üá®üá≥ ‰∏≠Êñá':
        language = 'chinese'

    save_user_to_db(user_id, language, message)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    show_welcome_message(message.chat.id, language)


def show_welcome_message(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    response = translations[language]['welcome']
    bot.send_message(chat_id, response)

    # –ü–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    show_status_choice(chat_id, language)


def show_status_choice(chat_id, language):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    btn1 = types.KeyboardButton(translations[language]['status_option1'])
    btn2 = types.KeyboardButton(translations[language]['status_option2'])

    markup.add(btn1, btn2)

    bot.send_message(chat_id,
                     translations[language]['status_choice'],
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in [
    translations['russian']['status_option1'],
    translations['russian']['status_option2'],
    translations['english']['status_option1'],
    translations['english']['status_option2'],
    translations['chinese']['status_option1'],
    translations['chinese']['status_option2']
])
def handle_status_selection(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if message.text in [translations['russian']['status_option1'],
                        translations['english']['status_option1'],
                        translations['chinese']['status_option1']]:
        status = 'not_in_russia'
    else:
        status = 'in_russia'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_user_status(user_id, status)

    # –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞
    show_citizenship_choice(message.chat.id, lang)


@bot.message_handler(func=lambda message: message.text in [
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    translations['russian']['kazakhstan'],
    translations['russian']['tajikistan'],
    translations['russian']['uzbekistan'],
    translations['russian']['china'],
    translations['russian']['belarus'],
    translations['russian']['ukraine'],
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    translations['english']['kazakhstan'],
    translations['english']['tajikistan'],
    translations['english']['uzbekistan'],
    translations['english']['china'],
    translations['english']['belarus'],
    translations['english']['ukraine'],
    # –ö–∏—Ç–∞–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    translations['chinese']['kazakhstan'],
    translations['chinese']['tajikistan'],
    translations['chinese']['uzbekistan'],
    translations['chinese']['china'],
    translations['chinese']['belarus'],
    translations['chinese']['ukraine']
])
def handle_citizenship_selection(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    country_mapping = {
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        translations['russian']['kazakhstan']: 'kazakhstan',
        translations['russian']['tajikistan']: 'tajikistan',
        translations['russian']['uzbekistan']: 'uzbekistan',
        translations['russian']['china']: 'china',
        translations['russian']['belarus']: 'belarus',
        translations['russian']['ukraine']: 'ukraine',
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        translations['english']['kazakhstan']: 'kazakhstan',
        translations['english']['tajikistan']: 'tajikistan',
        translations['english']['uzbekistan']: 'uzbekistan',
        translations['english']['china']: 'china',
        translations['english']['belarus']: 'belarus',
        translations['english']['ukraine']: 'ukraine',
        # –ö–∏—Ç–∞–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        translations['chinese']['kazakhstan']: 'kazakhstan',
        translations['chinese']['tajikistan']: 'tajikistan',
        translations['chinese']['uzbekistan']: 'uzbekistan',
        translations['chinese']['china']: 'china',
        translations['chinese']['belarus']: 'belarus',
        translations['chinese']['ukraine']: 'ukraine'
    }

    country_code = country_mapping.get(message.text)

    if country_code:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_user_citizenship(user_id, country_code)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        show_final_message(message.chat.id, user_id, lang, country_code)


def show_final_message(chat_id, user_id, language, country_code):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data(user_id)

    if not user_data:
        return

    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_names = {
        'not_in_russia': {
            'russian': '–ï—â—ë –Ω–µ –∑–∞–µ—Ö–∞–ª –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–§',
            'english': 'Not yet entered Russia',
            'chinese': 'Â∞öÊú™ËøõÂÖ•‰øÑÁΩóÊñØ'
        },
        'in_russia': {
            'russian': '–£–∂–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ –†–æ—Å—Å–∏–∏',
            'english': 'Already in Russia',
            'chinese': 'Â∑≤ÁªèÂú®‰øÑÁΩóÊñØ'
        }
    }

    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω
    country_names = {
        'kazakhstan': {
            'russian': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
            'english': 'Kazakhstan',
            'chinese': 'ÂìàËê®ÂÖãÊñØÂù¶'
        },
        'tajikistan': {
            'russian': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
            'english': 'Tajikistan',
            'chinese': 'Â°îÂêâÂÖãÊñØÂù¶'
        },
        'uzbekistan': {
            'russian': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
            'english': 'Uzbekistan',
            'chinese': '‰πåÂÖπÂà´ÂÖãÊñØÂù¶'
        },
        'china': {
            'russian': '–ö–∏—Ç–∞–π',
            'english': 'China',
            'chinese': '‰∏≠ÂõΩ'
        },
        'belarus': {
            'russian': '–ë–µ–ª–∞—Ä—É—Å—å',
            'english': 'Belarus',
            'chinese': 'ÁôΩ‰øÑÁΩóÊñØ'
        },
        'ukraine': {
            'russian': '–£–∫—Ä–∞–∏–Ω–∞',
            'english': 'Ukraine',
            'chinese': '‰πåÂÖãÂÖ∞'
        }
    }

    status = status_names[user_data['status']][language]
    country = country_names[country_code][language]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if language == 'russian':
        message_text = f"""‚úÖ –í–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –≤–∞—Å:

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {country}
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}

üìù –ß–µ–∫-–ª–∏—Å—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏!"""

    elif language == 'english':
        message_text = f"""‚úÖ Here's a checklist specifically for you:

üìã Your details:
‚Ä¢ Citizenship: {country}
‚Ä¢ Current status: {status}

üìù Checklists in development
Personalized instructions for your situation will be available soon!"""

    else:  # chinese
        message_text = f"""‚úÖ ËøôÊòØ‰∏ìÈó®‰∏∫ÊÇ®ÂáÜÂ§áÁöÑÊ∏ÖÂçïÔºö

üìã ÊÇ®ÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºö
‚Ä¢ ÂõΩÁ±ç: {country}
‚Ä¢ ÂΩìÂâçÁä∂ÊÄÅ: {status}

üìù Ê∏ÖÂçïÂºÄÂèë‰∏≠
ÈíàÂØπÊÇ®ÊÉÖÂÜµÁöÑ‰∏™ÊÄßÂåñËØ¥ÊòéÂç≥Â∞ÜÊé®Âá∫ÔºÅ"""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(translations[language]['menu']))

    bot.send_message(chat_id, message_text, reply_markup=markup)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@bot.message_handler(commands=['help'])
def send_help(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)
    bot.send_message(message.chat.id, translations[lang]['help'])


@bot.message_handler(func=lambda message: message.text in [
    translations['russian']['menu'],
    translations['english']['menu'],
    translations['chinese']['menu']
])
def handle_main_menu(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    markup = create_main_menu_keyboard(lang)
    bot.send_message(message.chat.id,
                     f"{translations[lang]['menu']}\n\n{translations[lang]['options']}",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    update_user_activity(user_id)
    lang = get_user_language(user_id)

    if call.data == "info":
        if lang == 'russian':
            text = "üìö –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ."
        elif lang == 'english':
            text = "üìö This is the information page!\nHere can be useful information about the bot."
        else:
            text = "üìö ËøôÊòØ‰ø°ÊÅØÈ°µÈù¢ÔºÅ\nËøôÈáåÂèØ‰ª•ÊòØÂÖ≥‰∫éÊú∫Âô®‰∫∫ÁöÑÊúâÁî®‰ø°ÊÅØ."
        bot.send_message(call.message.chat.id, text)

    elif call.data == "settings":
        send_welcome(call.message)

    elif call.data == "stats":
        stats = get_user_stats()
        if lang == 'russian':
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            for lang_name, count in stats:
                text += f"{lang_name}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        elif lang == 'english':
            text = "üìä Bot statistics:\n"
            for lang_name, count in stats:
                text += f"{lang_name}: {count} users\n"
        else:
            text = "üìä Êú∫Âô®‰∫∫ÁªüËÆ°:\n"
            for lang_name, count in stats:
                text += f"{lang_name}: {count} Áî®Êà∑\n"
        bot.send_message(call.message.chat.id, text)